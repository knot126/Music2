(defun split-string (str split-char)
	(do ((items (list)) (axis :uninitialised)) ((eql axis nil) items)
		(setq axis (position split-char str :from-end t))
		(setq items (cons
			(subseq str (if (not (eql axis nil)) (+ axis 1) 0))
			items
		))
		(setq str (subseq str 0 (or axis 0)))
		(format t "axis ~a items ~a str ~a~%" axis items str)
	)
)
(defun print-result (value)
	(write value)
	(format t "~%")
)
(defun test-split-string ()
	(print-result (split-string "asdf asdf asdf" #\ ))
	(print-result (split-string "cats and dogs are eating my house" #\ ))\
	(print-result (split-string "double  spaces OwO  :3" #\ ))
	(print-result (split-string "Tripple   space :D" #\ ))
	(print-result (split-string " at start  and end " #\ ))
	(print-result (split-string "not@a@space@char" #\@))
)
(test-split-string)
